
BareMetal_TaskScheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000320  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004c8  080004c8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004c8  080004c8  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080004c8  080004c8  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004c8  080004c8  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004c8  080004c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004cc  080004cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080004d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000020  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000040  20000040  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   000002a8  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000011d  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00020418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  000204c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f82  00000000  00000000  00020560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000005ac  00000000  00000000  000214e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003e59  00000000  00000000  00021a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000258e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001e0  00000000  00000000  00025938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000020 	.word	0x20000020
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080004b0 	.word	0x080004b0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000024 	.word	0x20000024
 80001e4:	080004b0 	.word	0x080004b0

080001e8 <main>:
uint32_t User_tasks_psps[MAX_TASKS_COUNT] = {TASK1_STACK_START, TASK2_STACK_START, TASK3_STACK_START, TASK4_STACK_START};
uint32_t task_handler[MAX_TASKS_COUNT] = {(uint32_t)task1_handler, (uint32_t)task2_handler, (uint32_t)task3_handler, (uint32_t)task4_handler};
uint32_t current_task = 0;

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	Enable_Processor_Faults();
 80001ec:	f000 f8b2 	bl	8000354 <Enable_Processor_Faults>

	Tasks_Stack_Init();
 80001f0:	f000 f868 	bl	80002c4 <Tasks_Stack_Init>

	Scheduler_Stack_Init(SCHEDULER_STACK_START);
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <main+0x24>)
 80001f6:	f000 f85f 	bl	80002b8 <Scheduler_Stack_Init>

	Switch_SP_to_PSP();
 80001fa:	f000 f8b2 	bl	8000362 <Switch_SP_to_PSP>

	SysTick_Init(1000);
 80001fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000202:	f000 f821 	bl	8000248 <SysTick_Init>

	task1_handler();
 8000206:	f000 f803 	bl	8000210 <task1_handler>

	/* Loop forever */
	for(;;);
 800020a:	e7fe      	b.n	800020a <main+0x22>
 800020c:	20031000 	.word	0x20031000

08000210 <task1_handler>:
}

void task1_handler(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0

}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <task2_handler>:

void task2_handler(void)
{
 800021e:	b480      	push	{r7}
 8000220:	af00      	add	r7, sp, #0

}
 8000222:	bf00      	nop
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr

0800022c <task3_handler>:
void task3_handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0

}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <task4_handler>:
void task4_handler(void)
{
 800023a:	b480      	push	{r7}
 800023c:	af00      	add	r7, sp, #0

}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <SysTick_Init>:
void SysTick_Init(uint32_t freq)
{
 8000248:	b480      	push	{r7}
 800024a:	b087      	sub	sp, #28
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
	uint32_t count_val 	=  SYSTICK_CLOCK/freq;
 8000250:	4a16      	ldr	r2, [pc, #88]	; (80002ac <SysTick_Init+0x64>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	fbb2 f3f3 	udiv	r3, r2, r3
 8000258:	617b      	str	r3, [r7, #20]
	uint32_t *pSTK_LOAD = (uint32_t *)0xE000E014;
 800025a:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <SysTick_Init+0x68>)
 800025c:	613b      	str	r3, [r7, #16]
	uint32_t *STK_CTRL  = (uint32_t *)0xE000E010;
 800025e:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <SysTick_Init+0x6c>)
 8000260:	60fb      	str	r3, [r7, #12]

	*pSTK_LOAD &= ~(0x00FFFFFF);
 8000262:	693b      	ldr	r3, [r7, #16]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	601a      	str	r2, [r3, #0]
	*pSTK_LOAD |= count_val;				//load the value
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	697b      	ldr	r3, [r7, #20]
 8000274:	431a      	orrs	r2, r3
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<2);   				//set systick clock as processor clock
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f043 0204 	orr.w	r2, r3, #4
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<1);					//enable systick
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f043 0202 	orr.w	r2, r3, #2
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<0);					//starts the systick counter
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f043 0201 	orr.w	r2, r3, #1
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
}
 800029e:	bf00      	nop
 80002a0:	371c      	adds	r7, #28
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	00f42400 	.word	0x00f42400
 80002b0:	e000e014 	.word	0xe000e014
 80002b4:	e000e010 	.word	0xe000e010

080002b8 <Scheduler_Stack_Init>:

__attribute__((naked)) void Scheduler_Stack_Init(uint32_t scheduler_stack_start)
{
 80002b8:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": :"r" (scheduler_stack_start) : );
 80002ba:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002be:	4770      	bx	lr
}
 80002c0:	bf00      	nop
	...

080002c4 <Tasks_Stack_Init>:


void Tasks_Stack_Init(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	uint16_t j,i;
	for(i=0;i<MAX_TASKS_COUNT;i++)
 80002ca:	2300      	movs	r3, #0
 80002cc:	803b      	strh	r3, [r7, #0]
 80002ce:	e032      	b.n	8000336 <Tasks_Stack_Init+0x72>
	{
		pPSP = (uint32_t *)User_tasks_psps[i];
 80002d0:	883b      	ldrh	r3, [r7, #0]
 80002d2:	4a1e      	ldr	r2, [pc, #120]	; (800034c <Tasks_Stack_Init+0x88>)
 80002d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d8:	607b      	str	r3, [r7, #4]
		pPSP--;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	3b04      	subs	r3, #4
 80002de:	607b      	str	r3, [r7, #4]
		*pPSP = 0x01000000;				//Dummy XPSP
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002e6:	601a      	str	r2, [r3, #0]
		pPSP--;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	3b04      	subs	r3, #4
 80002ec:	607b      	str	r3, [r7, #4]
		*pPSP = task_handler[i];		//Dummy return address
 80002ee:	883b      	ldrh	r3, [r7, #0]
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <Tasks_Stack_Init+0x8c>)
 80002f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	601a      	str	r2, [r3, #0]
		pPSP--;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3b04      	subs	r3, #4
 80002fe:	607b      	str	r3, [r7, #4]
		*pPSP = 0xFFFFFFFD;				//Dummy LR
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f06f 0202 	mvn.w	r2, #2
 8000306:	601a      	str	r2, [r3, #0]

		for(j=0;j<13;j++)				//R0-R3, R12 + R4-R11
 8000308:	2300      	movs	r3, #0
 800030a:	807b      	strh	r3, [r7, #2]
 800030c:	e008      	b.n	8000320 <Tasks_Stack_Init+0x5c>
		{
			pPSP--;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3b04      	subs	r3, #4
 8000312:	607b      	str	r3, [r7, #4]
			*pPSP =	0x00000000;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
		for(j=0;j<13;j++)				//R0-R3, R12 + R4-R11
 800031a:	887b      	ldrh	r3, [r7, #2]
 800031c:	3301      	adds	r3, #1
 800031e:	807b      	strh	r3, [r7, #2]
 8000320:	887b      	ldrh	r3, [r7, #2]
 8000322:	2b0c      	cmp	r3, #12
 8000324:	d9f3      	bls.n	800030e <Tasks_Stack_Init+0x4a>
		}

		User_tasks_psps[i] = (uint32_t)pPSP;	//preserv the value of updated PSP
 8000326:	883b      	ldrh	r3, [r7, #0]
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	4908      	ldr	r1, [pc, #32]	; (800034c <Tasks_Stack_Init+0x88>)
 800032c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i=0;i<MAX_TASKS_COUNT;i++)
 8000330:	883b      	ldrh	r3, [r7, #0]
 8000332:	3301      	adds	r3, #1
 8000334:	803b      	strh	r3, [r7, #0]
 8000336:	883b      	ldrh	r3, [r7, #0]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d9c9      	bls.n	80002d0 <Tasks_Stack_Init+0xc>
	}
}
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	20000000 	.word	0x20000000
 8000350:	20000010 	.word	0x20000010

08000354 <Enable_Processor_Faults>:

void Enable_Processor_Faults(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <Switch_SP_to_PSP>:

__attribute__((naked)) void Switch_SP_to_PSP(void)
{
	/*initialize the PSP*/
	__asm volatile("PUSH {LR}");			   //store LR in stack
 8000362:	b500      	push	{lr}
	__asm volatile("BL Get_Current_Task_PSP"); //get the value of psp for current task
 8000364:	f000 f81e 	bl	80003a4 <Get_Current_Task_PSP>
	__asm volatile("MSR PSP, R0");
 8000368:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800036c:	f85d eb04 	ldr.w	lr, [sp], #4

	/*set SP to PSP using control register*/
	__asm volatile("MOV R0,#0x20");
 8000370:	f04f 0020 	mov.w	r0, #32
	__asm volatile("MSR CONTROL, R0");
 8000374:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000378:	4770      	bx	lr
}
 800037a:	bf00      	nop

0800037c <update_psp_value>:

void update_psp_value(uint32_t current_psp)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
	User_tasks_psps[current_task] = current_psp;
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <update_psp_value+0x20>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4905      	ldr	r1, [pc, #20]	; (80003a0 <update_psp_value+0x24>)
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	2000003c 	.word	0x2000003c
 80003a0:	20000000 	.word	0x20000000

080003a4 <Get_Current_Task_PSP>:

uint32_t Get_Current_Task_PSP(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
	return User_tasks_psps[current_task];
 80003a8:	4b04      	ldr	r3, [pc, #16]	; (80003bc <Get_Current_Task_PSP+0x18>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <Get_Current_Task_PSP+0x1c>)
 80003ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	2000003c 	.word	0x2000003c
 80003c0:	20000000 	.word	0x20000000

080003c4 <schedule_next_task>:

void schedule_next_task(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	current_task++;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <schedule_next_task+0x24>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <schedule_next_task+0x24>)
 80003d0:	6013      	str	r3, [r2, #0]
	current_task %= MAX_TASKS_COUNT;
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <schedule_next_task+0x24>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f003 0303 	and.w	r3, r3, #3
 80003da:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <schedule_next_task+0x24>)
 80003dc:	6013      	str	r3, [r2, #0]
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	2000003c 	.word	0x2000003c

080003ec <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	// Context switching takes place in here
	// Saving context of current task
	// Get PSP of current task
	__asm volatile("MRS R0,PSP");
 80003ec:	f3ef 8009 	mrs	r0, PSP
	// save SF2 registers to stack
	__asm volatile("STMDB R0!,{R4-R11}");
 80003f0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// saving LR value
	__asm volatile("PUSH {LR}");
 80003f4:	b500      	push	{lr}

	// Update new PSP value
	__asm volatile("BL update_psp_value");
 80003f6:	f7ff ffc1 	bl	800037c <update_psp_value>

	// Retrieving context of previous task
	// Get next task to run
	__asm volatile("BL schedule_next_task");
 80003fa:	f7ff ffe3 	bl	80003c4 <schedule_next_task>
	// Get PSP of next task
	__asm volatile("BL Get_Current_Task_PSP");
 80003fe:	f7ff ffd1 	bl	80003a4 <Get_Current_Task_PSP>
	// load SF2 from memory to registers of corresponding task
	__asm volatile("LDMIA R0!,{R4-R11}");
 8000402:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// Update PSP
	__asm volatile("MSR PSP,R0");
 8000406:	f380 8809 	msr	PSP, r0

	// retrieving LR
	__asm volatile("POP {LR}");
 800040a:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 800040e:	4770      	bx	lr
}
 8000410:	bf00      	nop
	...

08000414 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000416:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000418:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800041c:	480c      	ldr	r0, [pc, #48]	; (8000450 <LoopForever+0x6>)
  ldr r1, =_edata
 800041e:	490d      	ldr	r1, [pc, #52]	; (8000454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <LoopForever+0xe>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000424:	e002      	b.n	800042c <LoopCopyDataInit>

08000426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042a:	3304      	adds	r3, #4

0800042c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800042c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800042e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000430:	d3f9      	bcc.n	8000426 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000432:	4a0a      	ldr	r2, [pc, #40]	; (800045c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000434:	4c0a      	ldr	r4, [pc, #40]	; (8000460 <LoopForever+0x16>)
  movs r3, #0
 8000436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000438:	e001      	b.n	800043e <LoopFillZerobss>

0800043a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800043c:	3204      	adds	r2, #4

0800043e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800043e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000440:	d3fb      	bcc.n	800043a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000442:	f000 f811 	bl	8000468 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000446:	f7ff fecf 	bl	80001e8 <main>

0800044a <LoopForever>:

LoopForever:
    b LoopForever
 800044a:	e7fe      	b.n	800044a <LoopForever>
  ldr   r0, =_estack
 800044c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000454:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000458:	080004d0 	.word	0x080004d0
  ldr r2, =_sbss
 800045c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000460:	20000040 	.word	0x20000040

08000464 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000464:	e7fe      	b.n	8000464 <ADC_IRQHandler>
	...

08000468 <__libc_init_array>:
 8000468:	b570      	push	{r4, r5, r6, lr}
 800046a:	4d0d      	ldr	r5, [pc, #52]	; (80004a0 <__libc_init_array+0x38>)
 800046c:	4c0d      	ldr	r4, [pc, #52]	; (80004a4 <__libc_init_array+0x3c>)
 800046e:	1b64      	subs	r4, r4, r5
 8000470:	10a4      	asrs	r4, r4, #2
 8000472:	2600      	movs	r6, #0
 8000474:	42a6      	cmp	r6, r4
 8000476:	d109      	bne.n	800048c <__libc_init_array+0x24>
 8000478:	4d0b      	ldr	r5, [pc, #44]	; (80004a8 <__libc_init_array+0x40>)
 800047a:	4c0c      	ldr	r4, [pc, #48]	; (80004ac <__libc_init_array+0x44>)
 800047c:	f000 f818 	bl	80004b0 <_init>
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	10a4      	asrs	r4, r4, #2
 8000484:	2600      	movs	r6, #0
 8000486:	42a6      	cmp	r6, r4
 8000488:	d105      	bne.n	8000496 <__libc_init_array+0x2e>
 800048a:	bd70      	pop	{r4, r5, r6, pc}
 800048c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000490:	4798      	blx	r3
 8000492:	3601      	adds	r6, #1
 8000494:	e7ee      	b.n	8000474 <__libc_init_array+0xc>
 8000496:	f855 3b04 	ldr.w	r3, [r5], #4
 800049a:	4798      	blx	r3
 800049c:	3601      	adds	r6, #1
 800049e:	e7f2      	b.n	8000486 <__libc_init_array+0x1e>
 80004a0:	080004c8 	.word	0x080004c8
 80004a4:	080004c8 	.word	0x080004c8
 80004a8:	080004c8 	.word	0x080004c8
 80004ac:	080004cc 	.word	0x080004cc

080004b0 <_init>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr

080004bc <_fini>:
 80004bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004be:	bf00      	nop
 80004c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004c2:	bc08      	pop	{r3}
 80004c4:	469e      	mov	lr, r3
 80004c6:	4770      	bx	lr
