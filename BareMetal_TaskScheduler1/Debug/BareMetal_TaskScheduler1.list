
BareMetal_TaskScheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000674  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800081c  0800081c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800081c  0800081c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800081c  0800081c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800081c  0800081c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800081c  0800081c  0001081c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000820  08000820  00010820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000070  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000058a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002d4  00000000  00000000  000205be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00020898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f8  00000000  00000000  000209b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000106e  00000000  00000000  00020ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b2d  00000000  00000000  00021b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004195  00000000  00000000  0002264b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000267e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000035c  00000000  00000000  00026830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000804 	.word	0x08000804

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000804 	.word	0x08000804

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b09      	ldr	r3, [pc, #36]	; (80002bc <led_off+0x30>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020c14 	.word	0x40020c14

080002c0 <main>:
uint32_t Current_task = 1;
uint32_t Global_tick_count;
TCB_t User_task_ctl_block[MAX_TASKS_COUNT];

int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	Enable_Processor_Faults();
 80002c4:	f000 f928 	bl	8000518 <Enable_Processor_Faults>

	Tasks_Stack_Init();
 80002c8:	f000 f89a 	bl	8000400 <Tasks_Stack_Init>

	Scheduler_Stack_Init(SCHEDULER_STACK_START);
 80002cc:	4806      	ldr	r0, [pc, #24]	; (80002e8 <main+0x28>)
 80002ce:	f000 f891 	bl	80003f4 <Scheduler_Stack_Init>

	Switch_SP_to_PSP();
 80002d2:	f000 f95f 	bl	8000594 <Switch_SP_to_PSP>

	led_init_all();
 80002d6:	f7ff ff87 	bl	80001e8 <led_init_all>

	SysTick_Init(TICK_HZ);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f000 f851 	bl	8000384 <SysTick_Init>

	task1_handler();
 80002e2:	f000 f807 	bl	80002f4 <task1_handler>

	/* Loop forever */
	for(;;);
 80002e6:	e7fe      	b.n	80002e6 <main+0x26>
 80002e8:	20031400 	.word	0x20031400

080002ec <Idle_task>:
}

void Idle_task(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	while(1)
 80002f0:	e7fe      	b.n	80002f0 <Idle_task+0x4>
	...

080002f4 <task1_handler>:

	}
}

void task1_handler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	led_on(LED_GREEN);
 80002f8:	200c      	movs	r0, #12
 80002fa:	f7ff ffaf 	bl	800025c <led_on>
	task_delay(DELAY_COUNT_1S);
 80002fe:	4805      	ldr	r0, [pc, #20]	; (8000314 <task1_handler+0x20>)
 8000300:	f000 f918 	bl	8000534 <task_delay>
	led_off(LED_GREEN);
 8000304:	200c      	movs	r0, #12
 8000306:	f7ff ffc1 	bl	800028c <led_off>
	task_delay(DELAY_COUNT_1S);
 800030a:	4802      	ldr	r0, [pc, #8]	; (8000314 <task1_handler+0x20>)
 800030c:	f000 f912 	bl	8000534 <task_delay>
}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	001312d0 	.word	0x001312d0

08000318 <task2_handler>:

void task2_handler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	led_on(LED_ORANGE);
 800031c:	200d      	movs	r0, #13
 800031e:	f7ff ff9d 	bl	800025c <led_on>
	task_delay(DELAY_COUNT_500MS);
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <task2_handler+0x20>)
 8000324:	f000 f906 	bl	8000534 <task_delay>
	led_off(LED_ORANGE);
 8000328:	200d      	movs	r0, #13
 800032a:	f7ff ffaf 	bl	800028c <led_off>
	task_delay(DELAY_COUNT_500MS);
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <task2_handler+0x20>)
 8000330:	f000 f900 	bl	8000534 <task_delay>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	00098968 	.word	0x00098968

0800033c <task3_handler>:
void task3_handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	led_on(LED_RED);
 8000340:	200e      	movs	r0, #14
 8000342:	f7ff ff8b 	bl	800025c <led_on>
	task_delay(DELAY_COUNT_250MS);
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <task3_handler+0x20>)
 8000348:	f000 f8f4 	bl	8000534 <task_delay>
	led_off(LED_RED);
 800034c:	200e      	movs	r0, #14
 800034e:	f7ff ff9d 	bl	800028c <led_off>
	task_delay(DELAY_COUNT_250MS);
 8000352:	4802      	ldr	r0, [pc, #8]	; (800035c <task3_handler+0x20>)
 8000354:	f000 f8ee 	bl	8000534 <task_delay>
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	0004c4b4 	.word	0x0004c4b4

08000360 <task4_handler>:
void task4_handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	led_on(LED_BLUE);
 8000364:	200f      	movs	r0, #15
 8000366:	f7ff ff79 	bl	800025c <led_on>
	task_delay(DELAY_COUNT_125MS);
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <task4_handler+0x20>)
 800036c:	f000 f8e2 	bl	8000534 <task_delay>
	led_off(LED_BLUE);
 8000370:	200f      	movs	r0, #15
 8000372:	f7ff ff8b 	bl	800028c <led_off>
	task_delay(DELAY_COUNT_125MS);
 8000376:	4802      	ldr	r0, [pc, #8]	; (8000380 <task4_handler+0x20>)
 8000378:	f000 f8dc 	bl	8000534 <task_delay>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	0002625a 	.word	0x0002625a

08000384 <SysTick_Init>:
void SysTick_Init(uint32_t freq)
{
 8000384:	b480      	push	{r7}
 8000386:	b087      	sub	sp, #28
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	uint32_t count_val 	=  SYSTICK_CLOCK/freq;
 800038c:	4a16      	ldr	r2, [pc, #88]	; (80003e8 <SysTick_Init+0x64>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	fbb2 f3f3 	udiv	r3, r2, r3
 8000394:	617b      	str	r3, [r7, #20]
	uint32_t *pSTK_LOAD = (uint32_t *)0xE000E014;
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <SysTick_Init+0x68>)
 8000398:	613b      	str	r3, [r7, #16]
	uint32_t *STK_CTRL  = (uint32_t *)0xE000E010;
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <SysTick_Init+0x6c>)
 800039c:	60fb      	str	r3, [r7, #12]

	*pSTK_LOAD &= ~(0x00FFFFFF);
 800039e:	693b      	ldr	r3, [r7, #16]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	601a      	str	r2, [r3, #0]
	*pSTK_LOAD |= count_val;				//load the value
 80003aa:	693b      	ldr	r3, [r7, #16]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	431a      	orrs	r2, r3
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<2);   				//set systick clock as processor clock
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0204 	orr.w	r2, r3, #4
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<1);					//enable systick
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 0202 	orr.w	r2, r3, #2
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<0);					//starts the systick counter
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 0201 	orr.w	r2, r3, #1
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	601a      	str	r2, [r3, #0]
}
 80003da:	bf00      	nop
 80003dc:	371c      	adds	r7, #28
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	00f42400 	.word	0x00f42400
 80003ec:	e000e014 	.word	0xe000e014
 80003f0:	e000e010 	.word	0xe000e010

080003f4 <Scheduler_Stack_Init>:

__attribute__((naked)) void Scheduler_Stack_Init(uint32_t scheduler_stack_start)
{
 80003f4:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": :"r" (scheduler_stack_start) : );
 80003f6:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80003fa:	4770      	bx	lr
}
 80003fc:	bf00      	nop
	...

08000400 <Tasks_Stack_Init>:


void Tasks_Stack_Init(void)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	uint16_t j,i;

	User_task_ctl_block[0].psp_value = IDLE_STACK_START;
 8000406:	4b3a      	ldr	r3, [pc, #232]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000408:	4a3a      	ldr	r2, [pc, #232]	; (80004f4 <Tasks_Stack_Init+0xf4>)
 800040a:	601a      	str	r2, [r3, #0]
	User_task_ctl_block[1].psp_value = TASK2_STACK_START;
 800040c:	4b38      	ldr	r3, [pc, #224]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 800040e:	4a3a      	ldr	r2, [pc, #232]	; (80004f8 <Tasks_Stack_Init+0xf8>)
 8000410:	611a      	str	r2, [r3, #16]
	User_task_ctl_block[2].psp_value = TASK3_STACK_START;
 8000412:	4b37      	ldr	r3, [pc, #220]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000414:	4a39      	ldr	r2, [pc, #228]	; (80004fc <Tasks_Stack_Init+0xfc>)
 8000416:	621a      	str	r2, [r3, #32]
	User_task_ctl_block[3].psp_value = TASK4_STACK_START;
 8000418:	4b35      	ldr	r3, [pc, #212]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 800041a:	4a39      	ldr	r2, [pc, #228]	; (8000500 <Tasks_Stack_Init+0x100>)
 800041c:	631a      	str	r2, [r3, #48]	; 0x30
	User_task_ctl_block[4].psp_value = TASK4_STACK_START;
 800041e:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000420:	4a37      	ldr	r2, [pc, #220]	; (8000500 <Tasks_Stack_Init+0x100>)
 8000422:	641a      	str	r2, [r3, #64]	; 0x40

	User_task_ctl_block[0].task_handler = Idle_task;
 8000424:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000426:	4a37      	ldr	r2, [pc, #220]	; (8000504 <Tasks_Stack_Init+0x104>)
 8000428:	60da      	str	r2, [r3, #12]
	User_task_ctl_block[1].task_handler = task1_handler;
 800042a:	4b31      	ldr	r3, [pc, #196]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 800042c:	4a36      	ldr	r2, [pc, #216]	; (8000508 <Tasks_Stack_Init+0x108>)
 800042e:	61da      	str	r2, [r3, #28]
	User_task_ctl_block[2].task_handler = task2_handler;
 8000430:	4b2f      	ldr	r3, [pc, #188]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000432:	4a36      	ldr	r2, [pc, #216]	; (800050c <Tasks_Stack_Init+0x10c>)
 8000434:	62da      	str	r2, [r3, #44]	; 0x2c
	User_task_ctl_block[3].task_handler = task3_handler;
 8000436:	4b2e      	ldr	r3, [pc, #184]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000438:	4a35      	ldr	r2, [pc, #212]	; (8000510 <Tasks_Stack_Init+0x110>)
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
	User_task_ctl_block[4].task_handler = task4_handler;
 800043c:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 800043e:	4a35      	ldr	r2, [pc, #212]	; (8000514 <Tasks_Stack_Init+0x114>)
 8000440:	64da      	str	r2, [r3, #76]	; 0x4c

	User_task_ctl_block[0].running_state = RUNNING_STATE;
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000444:	2201      	movs	r2, #1
 8000446:	721a      	strb	r2, [r3, #8]
	User_task_ctl_block[1].running_state = RUNNING_STATE;
 8000448:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 800044a:	2201      	movs	r2, #1
 800044c:	761a      	strb	r2, [r3, #24]
	User_task_ctl_block[2].running_state = RUNNING_STATE;
 800044e:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000450:	2201      	movs	r2, #1
 8000452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	User_task_ctl_block[3].running_state = RUNNING_STATE;
 8000456:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000458:	2201      	movs	r2, #1
 800045a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	User_task_ctl_block[4].running_state = RUNNING_STATE;
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000460:	2201      	movs	r2, #1
 8000462:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	for(i=0;i<MAX_TASKS_COUNT;i++)
 8000466:	2300      	movs	r3, #0
 8000468:	803b      	strh	r3, [r7, #0]
 800046a:	e037      	b.n	80004dc <Tasks_Stack_Init+0xdc>
	{
		pPSP = (uint32_t *)User_task_ctl_block[i].psp_value;
 800046c:	883b      	ldrh	r3, [r7, #0]
 800046e:	4a20      	ldr	r2, [pc, #128]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000470:	011b      	lsls	r3, r3, #4
 8000472:	4413      	add	r3, r2
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	607b      	str	r3, [r7, #4]
		pPSP--;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3b04      	subs	r3, #4
 800047c:	607b      	str	r3, [r7, #4]
		*pPSP = 0x01000000;				//Dummy XPSP
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000484:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	3b04      	subs	r3, #4
 800048a:	607b      	str	r3, [r7, #4]
		*pPSP = (uint32_t)User_task_ctl_block[i].task_handler;		//Dummy return address
 800048c:	883b      	ldrh	r3, [r7, #0]
 800048e:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 8000490:	011b      	lsls	r3, r3, #4
 8000492:	4413      	add	r3, r2
 8000494:	330c      	adds	r3, #12
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	601a      	str	r2, [r3, #0]
		pPSP--;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	3b04      	subs	r3, #4
 80004a2:	607b      	str	r3, [r7, #4]
		*pPSP = 0xFFFFFFFD;				//Dummy LR
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f06f 0202 	mvn.w	r2, #2
 80004aa:	601a      	str	r2, [r3, #0]

		for(j=0;j<13;j++)				//R0-R3, R12 + R4-R11
 80004ac:	2300      	movs	r3, #0
 80004ae:	807b      	strh	r3, [r7, #2]
 80004b0:	e008      	b.n	80004c4 <Tasks_Stack_Init+0xc4>
		{
			pPSP--;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3b04      	subs	r3, #4
 80004b6:	607b      	str	r3, [r7, #4]
			*pPSP =	0x00000000;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
		for(j=0;j<13;j++)				//R0-R3, R12 + R4-R11
 80004be:	887b      	ldrh	r3, [r7, #2]
 80004c0:	3301      	adds	r3, #1
 80004c2:	807b      	strh	r3, [r7, #2]
 80004c4:	887b      	ldrh	r3, [r7, #2]
 80004c6:	2b0c      	cmp	r3, #12
 80004c8:	d9f3      	bls.n	80004b2 <Tasks_Stack_Init+0xb2>
		}

		User_task_ctl_block[i].psp_value = (uint32_t)pPSP;	//preserv the value of updated PSP
 80004ca:	883b      	ldrh	r3, [r7, #0]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	4908      	ldr	r1, [pc, #32]	; (80004f0 <Tasks_Stack_Init+0xf0>)
 80004d0:	011b      	lsls	r3, r3, #4
 80004d2:	440b      	add	r3, r1
 80004d4:	601a      	str	r2, [r3, #0]
	for(i=0;i<MAX_TASKS_COUNT;i++)
 80004d6:	883b      	ldrh	r3, [r7, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	803b      	strh	r3, [r7, #0]
 80004dc:	883b      	ldrh	r3, [r7, #0]
 80004de:	2b04      	cmp	r3, #4
 80004e0:	d9c4      	bls.n	800046c <Tasks_Stack_Init+0x6c>
	}
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	20000024 	.word	0x20000024
 80004f4:	20030000 	.word	0x20030000
 80004f8:	20030800 	.word	0x20030800
 80004fc:	20030c00 	.word	0x20030c00
 8000500:	20031000 	.word	0x20031000
 8000504:	080002ed 	.word	0x080002ed
 8000508:	080002f5 	.word	0x080002f5
 800050c:	08000319 	.word	0x08000319
 8000510:	0800033d 	.word	0x0800033d
 8000514:	08000361 	.word	0x08000361

08000518 <Enable_Processor_Faults>:

void Enable_Processor_Faults(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <schedule>:

void schedule(void)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	af00      	add	r7, sp, #0
	Pending_PendSV();
 800052a:	f000 f901 	bl	8000730 <Pending_PendSV>
}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <task_delay>:

void task_delay(uint32_t tick_count)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	INTERRUPT_DISABLE();
 800053c:	f04f 0001 	mov.w	r0, #1
 8000540:	f380 8810 	msr	PRIMASK, r0
	if(Current_task)
 8000544:	4b10      	ldr	r3, [pc, #64]	; (8000588 <task_delay+0x54>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d014      	beq.n	8000576 <task_delay+0x42>
	{
		User_task_ctl_block[Current_task].block_count = Global_tick_count + tick_count;
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <task_delay+0x58>)
 800054e:	6819      	ldr	r1, [r3, #0]
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <task_delay+0x54>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	440a      	add	r2, r1
 8000558:	490d      	ldr	r1, [pc, #52]	; (8000590 <task_delay+0x5c>)
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	440b      	add	r3, r1
 800055e:	3304      	adds	r3, #4
 8000560:	601a      	str	r2, [r3, #0]
		User_task_ctl_block[Current_task].running_state = BLOCKED_STATE;
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <task_delay+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <task_delay+0x5c>)
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	4413      	add	r3, r2
 800056c:	3308      	adds	r3, #8
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
		schedule();
 8000572:	f7ff ffd8 	bl	8000526 <schedule>
	}
	INTERRUPT_ENABLE();
 8000576:	f04f 0000 	mov.w	r0, #0
 800057a:	f380 8810 	msr	PRIMASK, r0
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000000 	.word	0x20000000
 800058c:	20000020 	.word	0x20000020
 8000590:	20000024 	.word	0x20000024

08000594 <Switch_SP_to_PSP>:

__attribute__((naked)) void Switch_SP_to_PSP(void)
{
	/*initialize the PSP*/
	__asm volatile("PUSH {LR}");			   //store LR in stack
 8000594:	b500      	push	{lr}
	__asm volatile("BL Get_Current_task_PSP"); //get the value of psp for current task
 8000596:	f000 f821 	bl	80005dc <Get_Current_task_PSP>
	__asm volatile("MSR PSP, R0");
 800059a:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800059e:	f85d eb04 	ldr.w	lr, [sp], #4

	/*set SP to PSP using control register*/
	__asm volatile("MOV R0,#0x20");
 80005a2:	f04f 0020 	mov.w	r0, #32
	__asm volatile("MSR CONTROL, R0");
 80005a6:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80005aa:	4770      	bx	lr
}
 80005ac:	bf00      	nop
	...

080005b0 <update_psp_value>:

void update_psp_value(uint32_t current_psp)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	User_task_ctl_block[Current_task].psp_value = current_psp;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <update_psp_value+0x24>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <update_psp_value+0x28>)
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	4413      	add	r3, r2
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000024 	.word	0x20000024

080005dc <Get_Current_task_PSP>:

uint32_t Get_Current_task_PSP(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	return User_task_ctl_block[Current_task].psp_value;
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <Get_Current_task_PSP+0x1c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a05      	ldr	r2, [pc, #20]	; (80005fc <Get_Current_task_PSP+0x20>)
 80005e6:	011b      	lsls	r3, r3, #4
 80005e8:	4413      	add	r3, r2
 80005ea:	681b      	ldr	r3, [r3, #0]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000024 	.word	0x20000024

08000600 <schedule_next_task>:

void schedule_next_task(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	71fb      	strb	r3, [r7, #7]

	for(i = 0; i<MAX_TASKS_COUNT; ++i)
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e020      	b.n	8000652 <schedule_next_task+0x52>
	{
		Current_task++;
 8000610:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <schedule_next_task+0x80>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a1a      	ldr	r2, [pc, #104]	; (8000680 <schedule_next_task+0x80>)
 8000618:	6013      	str	r3, [r2, #0]
		Current_task %= MAX_TASKS_COUNT;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <schedule_next_task+0x80>)
 800061c:	6819      	ldr	r1, [r3, #0]
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <schedule_next_task+0x84>)
 8000620:	fba3 2301 	umull	r2, r3, r3, r1
 8000624:	089a      	lsrs	r2, r3, #2
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	1aca      	subs	r2, r1, r3
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <schedule_next_task+0x80>)
 8000630:	601a      	str	r2, [r3, #0]
		if((User_task_ctl_block[Current_task].running_state == RUNNING_STATE) && (Current_task != 0))
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <schedule_next_task+0x80>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <schedule_next_task+0x88>)
 8000638:	011b      	lsls	r3, r3, #4
 800063a:	4413      	add	r3, r2
 800063c:	3308      	adds	r3, #8
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d103      	bne.n	800064c <schedule_next_task+0x4c>
 8000644:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <schedule_next_task+0x80>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d106      	bne.n	800065a <schedule_next_task+0x5a>
	for(i = 0; i<MAX_TASKS_COUNT; ++i)
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	3301      	adds	r3, #1
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	2b04      	cmp	r3, #4
 8000656:	d9db      	bls.n	8000610 <schedule_next_task+0x10>
 8000658:	e000      	b.n	800065c <schedule_next_task+0x5c>
		{
			break;
 800065a:	bf00      	nop
		}
	}

	if(User_task_ctl_block[Current_task].running_state != RUNNING_STATE)
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <schedule_next_task+0x80>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a09      	ldr	r2, [pc, #36]	; (8000688 <schedule_next_task+0x88>)
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	4413      	add	r3, r2
 8000666:	3308      	adds	r3, #8
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d002      	beq.n	8000674 <schedule_next_task+0x74>
	{
		Current_task = 0;
 800066e:	4b04      	ldr	r3, [pc, #16]	; (8000680 <schedule_next_task+0x80>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
	}
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	20000000 	.word	0x20000000
 8000684:	cccccccd 	.word	0xcccccccd
 8000688:	20000024 	.word	0x20000024

0800068c <PendSV_Handler>:
__attribute__((naked)) void PendSV_Handler(void)
{
	// Context switching takes place in here
	// Saving context of current task
	// Get PSP of current task
	__asm volatile("MRS R0,PSP");
 800068c:	f3ef 8009 	mrs	r0, PSP
	// save SF2 registers to stack
	__asm volatile("STMDB R0!,{R4-R11}");
 8000690:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// saving LR value
	__asm volatile("PUSH {LR}");
 8000694:	b500      	push	{lr}

	// Update new PSP value
	__asm volatile("BL update_psp_value");
 8000696:	f7ff ff8b 	bl	80005b0 <update_psp_value>

	// Retrieving context of previous task
	// Get next task to run
	__asm volatile("BL schedule_next_task");
 800069a:	f7ff ffb1 	bl	8000600 <schedule_next_task>
	// Get PSP of next task
	__asm volatile("BL Get_Current_task_PSP");
 800069e:	f7ff ff9d 	bl	80005dc <Get_Current_task_PSP>
	// load SF2 from memory to registers of corresponding task
	__asm volatile("LDMIA R0!,{R4-R11}");
 80006a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// Update PSP
	__asm volatile("MSR PSP,R0");
 80006a6:	f380 8809 	msr	PSP, r0

	// retrieving LR
	__asm volatile("POP {LR}");
 80006aa:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 80006ae:	4770      	bx	lr
}
 80006b0:	bf00      	nop
	...

080006b4 <update_global_tick_count>:

void update_global_tick_count(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
	Global_tick_count++;
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <update_global_tick_count+0x18>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	4a03      	ldr	r2, [pc, #12]	; (80006cc <update_global_tick_count+0x18>)
 80006c0:	6013      	str	r3, [r2, #0]
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	20000020 	.word	0x20000020

080006d0 <Unblocking_task>:

void Unblocking_task(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 1; i< MAX_TASKS_COUNT; i++)
 80006d6:	2301      	movs	r3, #1
 80006d8:	71fb      	strb	r3, [r7, #7]
 80006da:	e01b      	b.n	8000714 <Unblocking_task+0x44>
	{
		if(User_task_ctl_block[i].running_state == BLOCKED_STATE)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4a12      	ldr	r2, [pc, #72]	; (8000728 <Unblocking_task+0x58>)
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	4413      	add	r3, r2
 80006e4:	3308      	adds	r3, #8
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d110      	bne.n	800070e <Unblocking_task+0x3e>
		{
			if(User_task_ctl_block[i].block_count == Global_tick_count)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <Unblocking_task+0x58>)
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	3304      	adds	r3, #4
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <Unblocking_task+0x5c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d106      	bne.n	800070e <Unblocking_task+0x3e>
			{
				User_task_ctl_block[i].running_state = RUNNING_STATE;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4a09      	ldr	r2, [pc, #36]	; (8000728 <Unblocking_task+0x58>)
 8000704:	011b      	lsls	r3, r3, #4
 8000706:	4413      	add	r3, r2
 8000708:	3308      	adds	r3, #8
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]
	for(i = 1; i< MAX_TASKS_COUNT; i++)
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	3301      	adds	r3, #1
 8000712:	71fb      	strb	r3, [r7, #7]
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b04      	cmp	r3, #4
 8000718:	d9e0      	bls.n	80006dc <Unblocking_task+0xc>
			}
		}
	}
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000024 	.word	0x20000024
 800072c:	20000020 	.word	0x20000020

08000730 <Pending_PendSV>:
void Pending_PendSV(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *)0xE000ED04;
 8000736:	4b07      	ldr	r3, [pc, #28]	; (8000754 <Pending_PendSV+0x24>)
 8000738:	607b      	str	r3, [r7, #4]
	*pICSR |= (1<<28);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	601a      	str	r2, [r3, #0]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed04 	.word	0xe000ed04

08000758 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	update_global_tick_count();
 8000758:	f7ff ffac 	bl	80006b4 <update_global_tick_count>
	Unblocking_task();
 800075c:	f7ff ffb8 	bl	80006d0 <Unblocking_task>
	Pending_PendSV();
 8000760:	f7ff ffe6 	bl	8000730 <Pending_PendSV>
}
 8000764:	bf00      	nop
	...

08000768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800076a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800076c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	; (80007a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <LoopForever+0xe>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	; (80007b4 <LoopForever+0x16>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000796:	f000 f811 	bl	80007bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079a:	f7ff fd91 	bl	80002c0 <main>

0800079e <LoopForever>:

LoopForever:
    b LoopForever
 800079e:	e7fe      	b.n	800079e <LoopForever>
  ldr   r0, =_estack
 80007a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80007ac:	08000824 	.word	0x08000824
  ldr r2, =_sbss
 80007b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80007b4:	20000074 	.word	0x20000074

080007b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC_IRQHandler>
	...

080007bc <__libc_init_array>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	4d0d      	ldr	r5, [pc, #52]	; (80007f4 <__libc_init_array+0x38>)
 80007c0:	4c0d      	ldr	r4, [pc, #52]	; (80007f8 <__libc_init_array+0x3c>)
 80007c2:	1b64      	subs	r4, r4, r5
 80007c4:	10a4      	asrs	r4, r4, #2
 80007c6:	2600      	movs	r6, #0
 80007c8:	42a6      	cmp	r6, r4
 80007ca:	d109      	bne.n	80007e0 <__libc_init_array+0x24>
 80007cc:	4d0b      	ldr	r5, [pc, #44]	; (80007fc <__libc_init_array+0x40>)
 80007ce:	4c0c      	ldr	r4, [pc, #48]	; (8000800 <__libc_init_array+0x44>)
 80007d0:	f000 f818 	bl	8000804 <_init>
 80007d4:	1b64      	subs	r4, r4, r5
 80007d6:	10a4      	asrs	r4, r4, #2
 80007d8:	2600      	movs	r6, #0
 80007da:	42a6      	cmp	r6, r4
 80007dc:	d105      	bne.n	80007ea <__libc_init_array+0x2e>
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e4:	4798      	blx	r3
 80007e6:	3601      	adds	r6, #1
 80007e8:	e7ee      	b.n	80007c8 <__libc_init_array+0xc>
 80007ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ee:	4798      	blx	r3
 80007f0:	3601      	adds	r6, #1
 80007f2:	e7f2      	b.n	80007da <__libc_init_array+0x1e>
 80007f4:	0800081c 	.word	0x0800081c
 80007f8:	0800081c 	.word	0x0800081c
 80007fc:	0800081c 	.word	0x0800081c
 8000800:	08000820 	.word	0x08000820

08000804 <_init>:
 8000804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000806:	bf00      	nop
 8000808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080a:	bc08      	pop	{r3}
 800080c:	469e      	mov	lr, r3
 800080e:	4770      	bx	lr

08000810 <_fini>:
 8000810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000812:	bf00      	nop
 8000814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000816:	bc08      	pop	{r3}
 8000818:	469e      	mov	lr, r3
 800081a:	4770      	bx	lr
