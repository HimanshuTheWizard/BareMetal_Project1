
BareMetal_TaskScheduler1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006a0  080006a8  000106a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006a0  080006a0  000106a8  2**0
                  CONTENTS
  4 .ARM          00000000  080006a0  080006a0  000106a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a0  080006a8  000106a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a0  080006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a4  080006a4  000106a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000106a8  2**0
                  CONTENTS
 10 .bss          00000060  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000106a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004bb  00000000  00000000  000106d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000260  00000000  00000000  00010b93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  00010df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c0  00000000  00000000  00010ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000105c  00000000  00000000  00010fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009fd  00000000  00000000  00011ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004021  00000000  00000000  000129f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00016a1a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000027c  00000000  00000000  00016a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000688 	.word	0x08000688

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000688 	.word	0x08000688

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
	...

08000214 <led_init_all>:

void led_init_all(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x6c>)
 800021c:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <led_init_all+0x70>)
 8000220:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 0208 	orr.w	r2, r3, #8
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800025e:	200c      	movs	r0, #12
 8000260:	f000 f82a 	bl	80002b8 <led_off>
    led_off(LED_ORANGE);
 8000264:	200d      	movs	r0, #13
 8000266:	f000 f827 	bl	80002b8 <led_off>
    led_off(LED_RED);
 800026a:	200e      	movs	r0, #14
 800026c:	f000 f824 	bl	80002b8 <led_off>
    led_off(LED_BLUE);
 8000270:	200f      	movs	r0, #15
 8000272:	f000 f821 	bl	80002b8 <led_off>



}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40023830 	.word	0x40023830
 8000284:	40020c00 	.word	0x40020c00

08000288 <led_on>:

void led_on(uint8_t led_no)
{
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <led_on+0x2c>)
 8000294:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	2101      	movs	r1, #1
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	431a      	orrs	r2, r3
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	601a      	str	r2, [r3, #0]

}
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40020c14 	.word	0x40020c14

080002b8 <led_off>:

void led_off(uint8_t led_no)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b085      	sub	sp, #20
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <led_off+0x30>)
 80002c4:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	79fa      	ldrb	r2, [r7, #7]
 80002cc:	2101      	movs	r1, #1
 80002ce:	fa01 f202 	lsl.w	r2, r1, r2
 80002d2:	43d2      	mvns	r2, r2
 80002d4:	401a      	ands	r2, r3
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	601a      	str	r2, [r3, #0]

}
 80002da:	bf00      	nop
 80002dc:	3714      	adds	r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40020c14 	.word	0x40020c14

080002ec <main>:
/*---------GLOBAL VARIABLES---------*/
uint32_t current_task = 0;
TCB_t User_task_ctl_block[MAX_TASKS_COUNT];

int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	Enable_Processor_Faults();
 80002f0:	f000 f918 	bl	8000524 <Enable_Processor_Faults>

	Tasks_Stack_Init();
 80002f4:	f000 f896 	bl	8000424 <Tasks_Stack_Init>

	Scheduler_Stack_Init(SCHEDULER_STACK_START);
 80002f8:	4806      	ldr	r0, [pc, #24]	; (8000314 <main+0x28>)
 80002fa:	f000 f88d 	bl	8000418 <Scheduler_Stack_Init>

	Switch_SP_to_PSP();
 80002fe:	f000 f918 	bl	8000532 <Switch_SP_to_PSP>

	led_init_all();
 8000302:	f7ff ff87 	bl	8000214 <led_init_all>

	SysTick_Init(TICK_HZ);
 8000306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030a:	f000 f84d 	bl	80003a8 <SysTick_Init>

	task1_handler();
 800030e:	f000 f803 	bl	8000318 <task1_handler>

	/* Loop forever */
	for(;;);
 8000312:	e7fe      	b.n	8000312 <main+0x26>
 8000314:	20031000 	.word	0x20031000

08000318 <task1_handler>:
}

void task1_handler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	led_on(LED_GREEN);
 800031c:	200c      	movs	r0, #12
 800031e:	f7ff ffb3 	bl	8000288 <led_on>
	delay(DELAY_COUNT_1S);
 8000322:	4805      	ldr	r0, [pc, #20]	; (8000338 <task1_handler+0x20>)
 8000324:	f7ff ff60 	bl	80001e8 <delay>
	led_off(LED_GREEN);
 8000328:	200c      	movs	r0, #12
 800032a:	f7ff ffc5 	bl	80002b8 <led_off>
	delay(DELAY_COUNT_1S);
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <task1_handler+0x20>)
 8000330:	f7ff ff5a 	bl	80001e8 <delay>
}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	001312d0 	.word	0x001312d0

0800033c <task2_handler>:

void task2_handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	led_on(LED_ORANGE);
 8000340:	200d      	movs	r0, #13
 8000342:	f7ff ffa1 	bl	8000288 <led_on>
	delay(DELAY_COUNT_500MS);
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <task2_handler+0x20>)
 8000348:	f7ff ff4e 	bl	80001e8 <delay>
	led_off(LED_ORANGE);
 800034c:	200d      	movs	r0, #13
 800034e:	f7ff ffb3 	bl	80002b8 <led_off>
	delay(DELAY_COUNT_500MS);
 8000352:	4802      	ldr	r0, [pc, #8]	; (800035c <task2_handler+0x20>)
 8000354:	f7ff ff48 	bl	80001e8 <delay>
}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	00098968 	.word	0x00098968

08000360 <task3_handler>:
void task3_handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	led_on(LED_RED);
 8000364:	200e      	movs	r0, #14
 8000366:	f7ff ff8f 	bl	8000288 <led_on>
	delay(DELAY_COUNT_250MS);
 800036a:	4805      	ldr	r0, [pc, #20]	; (8000380 <task3_handler+0x20>)
 800036c:	f7ff ff3c 	bl	80001e8 <delay>
	led_off(LED_RED);
 8000370:	200e      	movs	r0, #14
 8000372:	f7ff ffa1 	bl	80002b8 <led_off>
	delay(DELAY_COUNT_250MS);
 8000376:	4802      	ldr	r0, [pc, #8]	; (8000380 <task3_handler+0x20>)
 8000378:	f7ff ff36 	bl	80001e8 <delay>
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	0004c4b4 	.word	0x0004c4b4

08000384 <task4_handler>:
void task4_handler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	led_on(LED_BLUE);
 8000388:	200f      	movs	r0, #15
 800038a:	f7ff ff7d 	bl	8000288 <led_on>
	delay(DELAY_COUNT_125MS);
 800038e:	4805      	ldr	r0, [pc, #20]	; (80003a4 <task4_handler+0x20>)
 8000390:	f7ff ff2a 	bl	80001e8 <delay>
	led_off(LED_BLUE);
 8000394:	200f      	movs	r0, #15
 8000396:	f7ff ff8f 	bl	80002b8 <led_off>
	delay(DELAY_COUNT_125MS);
 800039a:	4802      	ldr	r0, [pc, #8]	; (80003a4 <task4_handler+0x20>)
 800039c:	f7ff ff24 	bl	80001e8 <delay>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	0002625a 	.word	0x0002625a

080003a8 <SysTick_Init>:
void SysTick_Init(uint32_t freq)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b087      	sub	sp, #28
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	uint32_t count_val 	=  SYSTICK_CLOCK/freq;
 80003b0:	4a16      	ldr	r2, [pc, #88]	; (800040c <SysTick_Init+0x64>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b8:	617b      	str	r3, [r7, #20]
	uint32_t *pSTK_LOAD = (uint32_t *)0xE000E014;
 80003ba:	4b15      	ldr	r3, [pc, #84]	; (8000410 <SysTick_Init+0x68>)
 80003bc:	613b      	str	r3, [r7, #16]
	uint32_t *STK_CTRL  = (uint32_t *)0xE000E010;
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <SysTick_Init+0x6c>)
 80003c0:	60fb      	str	r3, [r7, #12]

	*pSTK_LOAD &= ~(0x00FFFFFF);
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	601a      	str	r2, [r3, #0]
	*pSTK_LOAD |= count_val;				//load the value
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	431a      	orrs	r2, r3
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<2);   				//set systick clock as processor clock
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f043 0204 	orr.w	r2, r3, #4
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<1);					//enable systick
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f043 0202 	orr.w	r2, r3, #2
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	601a      	str	r2, [r3, #0]
	*STK_CTRL  |= (1<<0);					//starts the systick counter
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f043 0201 	orr.w	r2, r3, #1
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	601a      	str	r2, [r3, #0]
}
 80003fe:	bf00      	nop
 8000400:	371c      	adds	r7, #28
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	00f42400 	.word	0x00f42400
 8000410:	e000e014 	.word	0xe000e014
 8000414:	e000e010 	.word	0xe000e010

08000418 <Scheduler_Stack_Init>:

__attribute__((naked)) void Scheduler_Stack_Init(uint32_t scheduler_stack_start)
{
 8000418:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": :"r" (scheduler_stack_start) : );
 800041a:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 800041e:	4770      	bx	lr
}
 8000420:	bf00      	nop
	...

08000424 <Tasks_Stack_Init>:


void Tasks_Stack_Init(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	uint16_t j,i;

	User_task_ctl_block[0].psp_value = TASK1_STACK_START;
 800042a:	4b35      	ldr	r3, [pc, #212]	; (8000500 <Tasks_Stack_Init+0xdc>)
 800042c:	4a35      	ldr	r2, [pc, #212]	; (8000504 <Tasks_Stack_Init+0xe0>)
 800042e:	601a      	str	r2, [r3, #0]
	User_task_ctl_block[1].psp_value = TASK2_STACK_START;
 8000430:	4b33      	ldr	r3, [pc, #204]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000432:	4a35      	ldr	r2, [pc, #212]	; (8000508 <Tasks_Stack_Init+0xe4>)
 8000434:	611a      	str	r2, [r3, #16]
	User_task_ctl_block[2].psp_value = TASK3_STACK_START;
 8000436:	4b32      	ldr	r3, [pc, #200]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000438:	4a34      	ldr	r2, [pc, #208]	; (800050c <Tasks_Stack_Init+0xe8>)
 800043a:	621a      	str	r2, [r3, #32]
	User_task_ctl_block[3].psp_value = TASK4_STACK_START;
 800043c:	4b30      	ldr	r3, [pc, #192]	; (8000500 <Tasks_Stack_Init+0xdc>)
 800043e:	4a34      	ldr	r2, [pc, #208]	; (8000510 <Tasks_Stack_Init+0xec>)
 8000440:	631a      	str	r2, [r3, #48]	; 0x30

	User_task_ctl_block[0].task_handler = task1_handler;
 8000442:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000444:	4a33      	ldr	r2, [pc, #204]	; (8000514 <Tasks_Stack_Init+0xf0>)
 8000446:	60da      	str	r2, [r3, #12]
	User_task_ctl_block[1].task_handler = task2_handler;
 8000448:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <Tasks_Stack_Init+0xdc>)
 800044a:	4a33      	ldr	r2, [pc, #204]	; (8000518 <Tasks_Stack_Init+0xf4>)
 800044c:	61da      	str	r2, [r3, #28]
	User_task_ctl_block[2].task_handler = task3_handler;
 800044e:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000450:	4a32      	ldr	r2, [pc, #200]	; (800051c <Tasks_Stack_Init+0xf8>)
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
	User_task_ctl_block[3].task_handler = task4_handler;
 8000454:	4b2a      	ldr	r3, [pc, #168]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000456:	4a32      	ldr	r2, [pc, #200]	; (8000520 <Tasks_Stack_Init+0xfc>)
 8000458:	63da      	str	r2, [r3, #60]	; 0x3c

	User_task_ctl_block[0].running_state = BLOCKED_STATE;
 800045a:	4b29      	ldr	r3, [pc, #164]	; (8000500 <Tasks_Stack_Init+0xdc>)
 800045c:	2200      	movs	r2, #0
 800045e:	721a      	strb	r2, [r3, #8]
	User_task_ctl_block[1].running_state = BLOCKED_STATE;
 8000460:	4b27      	ldr	r3, [pc, #156]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000462:	2200      	movs	r2, #0
 8000464:	761a      	strb	r2, [r3, #24]
	User_task_ctl_block[2].running_state = BLOCKED_STATE;
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000468:	2200      	movs	r2, #0
 800046a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	User_task_ctl_block[3].running_state = BLOCKED_STATE;
 800046e:	4b24      	ldr	r3, [pc, #144]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000470:	2200      	movs	r2, #0
 8000472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	for(i=0;i<MAX_TASKS_COUNT;i++)
 8000476:	2300      	movs	r3, #0
 8000478:	803b      	strh	r3, [r7, #0]
 800047a:	e037      	b.n	80004ec <Tasks_Stack_Init+0xc8>
	{
		pPSP = (uint32_t *)User_task_ctl_block[i].psp_value;
 800047c:	883b      	ldrh	r3, [r7, #0]
 800047e:	4a20      	ldr	r2, [pc, #128]	; (8000500 <Tasks_Stack_Init+0xdc>)
 8000480:	011b      	lsls	r3, r3, #4
 8000482:	4413      	add	r3, r2
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	607b      	str	r3, [r7, #4]
		pPSP--;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3b04      	subs	r3, #4
 800048c:	607b      	str	r3, [r7, #4]
		*pPSP = 0x01000000;				//Dummy XPSP
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000494:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3b04      	subs	r3, #4
 800049a:	607b      	str	r3, [r7, #4]
		*pPSP = (uint32_t)User_task_ctl_block[i].task_handler;		//Dummy return address
 800049c:	883b      	ldrh	r3, [r7, #0]
 800049e:	4a18      	ldr	r2, [pc, #96]	; (8000500 <Tasks_Stack_Init+0xdc>)
 80004a0:	011b      	lsls	r3, r3, #4
 80004a2:	4413      	add	r3, r2
 80004a4:	330c      	adds	r3, #12
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	601a      	str	r2, [r3, #0]
		pPSP--;
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3b04      	subs	r3, #4
 80004b2:	607b      	str	r3, [r7, #4]
		*pPSP = 0xFFFFFFFD;				//Dummy LR
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f06f 0202 	mvn.w	r2, #2
 80004ba:	601a      	str	r2, [r3, #0]

		for(j=0;j<13;j++)				//R0-R3, R12 + R4-R11
 80004bc:	2300      	movs	r3, #0
 80004be:	807b      	strh	r3, [r7, #2]
 80004c0:	e008      	b.n	80004d4 <Tasks_Stack_Init+0xb0>
		{
			pPSP--;
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3b04      	subs	r3, #4
 80004c6:	607b      	str	r3, [r7, #4]
			*pPSP =	0x00000000;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
		for(j=0;j<13;j++)				//R0-R3, R12 + R4-R11
 80004ce:	887b      	ldrh	r3, [r7, #2]
 80004d0:	3301      	adds	r3, #1
 80004d2:	807b      	strh	r3, [r7, #2]
 80004d4:	887b      	ldrh	r3, [r7, #2]
 80004d6:	2b0c      	cmp	r3, #12
 80004d8:	d9f3      	bls.n	80004c2 <Tasks_Stack_Init+0x9e>
		}

		User_task_ctl_block[i].psp_value = (uint32_t)pPSP;	//preserv the value of updated PSP
 80004da:	883b      	ldrh	r3, [r7, #0]
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	4908      	ldr	r1, [pc, #32]	; (8000500 <Tasks_Stack_Init+0xdc>)
 80004e0:	011b      	lsls	r3, r3, #4
 80004e2:	440b      	add	r3, r1
 80004e4:	601a      	str	r2, [r3, #0]
	for(i=0;i<MAX_TASKS_COUNT;i++)
 80004e6:	883b      	ldrh	r3, [r7, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	803b      	strh	r3, [r7, #0]
 80004ec:	883b      	ldrh	r3, [r7, #0]
 80004ee:	2b03      	cmp	r3, #3
 80004f0:	d9c4      	bls.n	800047c <Tasks_Stack_Init+0x58>
	}
}
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr
 8000500:	20000020 	.word	0x20000020
 8000504:	20030000 	.word	0x20030000
 8000508:	20030400 	.word	0x20030400
 800050c:	20030800 	.word	0x20030800
 8000510:	20030c00 	.word	0x20030c00
 8000514:	08000319 	.word	0x08000319
 8000518:	0800033d 	.word	0x0800033d
 800051c:	08000361 	.word	0x08000361
 8000520:	08000385 	.word	0x08000385

08000524 <Enable_Processor_Faults>:

void Enable_Processor_Faults(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <Switch_SP_to_PSP>:

__attribute__((naked)) void Switch_SP_to_PSP(void)
{
	/*initialize the PSP*/
	__asm volatile("PUSH {LR}");			   //store LR in stack
 8000532:	b500      	push	{lr}
	__asm volatile("BL Get_Current_Task_PSP"); //get the value of psp for current task
 8000534:	f000 f820 	bl	8000578 <Get_Current_Task_PSP>
	__asm volatile("MSR PSP, R0");
 8000538:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800053c:	f85d eb04 	ldr.w	lr, [sp], #4

	/*set SP to PSP using control register*/
	__asm volatile("MOV R0,#0x20");
 8000540:	f04f 0020 	mov.w	r0, #32
	__asm volatile("MSR CONTROL, R0");
 8000544:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 8000548:	4770      	bx	lr
}
 800054a:	bf00      	nop

0800054c <update_psp_value>:

void update_psp_value(uint32_t current_psp)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	User_task_ctl_block[current_task].psp_value = current_psp;
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <update_psp_value+0x24>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <update_psp_value+0x28>)
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	4413      	add	r3, r2
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000001c 	.word	0x2000001c
 8000574:	20000020 	.word	0x20000020

08000578 <Get_Current_Task_PSP>:

uint32_t Get_Current_Task_PSP(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	return User_task_ctl_block[current_task].psp_value;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <Get_Current_Task_PSP+0x1c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a05      	ldr	r2, [pc, #20]	; (8000598 <Get_Current_Task_PSP+0x20>)
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	4413      	add	r3, r2
 8000586:	681b      	ldr	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000001c 	.word	0x2000001c
 8000598:	20000020 	.word	0x20000020

0800059c <schedule_next_task>:

void schedule_next_task(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
	current_task++;
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <schedule_next_task+0x24>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <schedule_next_task+0x24>)
 80005a8:	6013      	str	r3, [r2, #0]
	current_task %= MAX_TASKS_COUNT;
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <schedule_next_task+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f003 0303 	and.w	r3, r3, #3
 80005b2:	4a03      	ldr	r2, [pc, #12]	; (80005c0 <schedule_next_task+0x24>)
 80005b4:	6013      	str	r3, [r2, #0]
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	2000001c 	.word	0x2000001c

080005c4 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	// Context switching takes place in here
	// Saving context of current task
	// Get PSP of current task
	__asm volatile("MRS R0,PSP");
 80005c4:	f3ef 8009 	mrs	r0, PSP
	// save SF2 registers to stack
	__asm volatile("STMDB R0!,{R4-R11}");
 80005c8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// saving LR value
	__asm volatile("PUSH {LR}");
 80005cc:	b500      	push	{lr}

	// Update new PSP value
	__asm volatile("BL update_psp_value");
 80005ce:	f7ff ffbd 	bl	800054c <update_psp_value>

	// Retrieving context of previous task
	// Get next task to run
	__asm volatile("BL schedule_next_task");
 80005d2:	f7ff ffe3 	bl	800059c <schedule_next_task>
	// Get PSP of next task
	__asm volatile("BL Get_Current_Task_PSP");
 80005d6:	f7ff ffcf 	bl	8000578 <Get_Current_Task_PSP>
	// load SF2 from memory to registers of corresponding task
	__asm volatile("LDMIA R0!,{R4-R11}");
 80005da:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// Update PSP
	__asm volatile("MSR PSP,R0");
 80005de:	f380 8809 	msr	PSP, r0

	// retrieving LR
	__asm volatile("POP {LR}");
 80005e2:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 80005e6:	4770      	bx	lr
}
 80005e8:	bf00      	nop
	...

080005ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ec:	480d      	ldr	r0, [pc, #52]	; (8000624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f6:	490d      	ldr	r1, [pc, #52]	; (800062c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <LoopForever+0xe>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800060c:	4c0a      	ldr	r4, [pc, #40]	; (8000638 <LoopForever+0x16>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061a:	f000 f811 	bl	8000640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061e:	f7ff fe65 	bl	80002ec <main>

08000622 <LoopForever>:

LoopForever:
    b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   r0, =_estack
 8000624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000630:	080006a8 	.word	0x080006a8
  ldr r2, =_sbss
 8000634:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000638:	20000060 	.word	0x20000060

0800063c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800063c:	e7fe      	b.n	800063c <ADC_IRQHandler>
	...

08000640 <__libc_init_array>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	4d0d      	ldr	r5, [pc, #52]	; (8000678 <__libc_init_array+0x38>)
 8000644:	4c0d      	ldr	r4, [pc, #52]	; (800067c <__libc_init_array+0x3c>)
 8000646:	1b64      	subs	r4, r4, r5
 8000648:	10a4      	asrs	r4, r4, #2
 800064a:	2600      	movs	r6, #0
 800064c:	42a6      	cmp	r6, r4
 800064e:	d109      	bne.n	8000664 <__libc_init_array+0x24>
 8000650:	4d0b      	ldr	r5, [pc, #44]	; (8000680 <__libc_init_array+0x40>)
 8000652:	4c0c      	ldr	r4, [pc, #48]	; (8000684 <__libc_init_array+0x44>)
 8000654:	f000 f818 	bl	8000688 <_init>
 8000658:	1b64      	subs	r4, r4, r5
 800065a:	10a4      	asrs	r4, r4, #2
 800065c:	2600      	movs	r6, #0
 800065e:	42a6      	cmp	r6, r4
 8000660:	d105      	bne.n	800066e <__libc_init_array+0x2e>
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f855 3b04 	ldr.w	r3, [r5], #4
 8000668:	4798      	blx	r3
 800066a:	3601      	adds	r6, #1
 800066c:	e7ee      	b.n	800064c <__libc_init_array+0xc>
 800066e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000672:	4798      	blx	r3
 8000674:	3601      	adds	r6, #1
 8000676:	e7f2      	b.n	800065e <__libc_init_array+0x1e>
 8000678:	080006a0 	.word	0x080006a0
 800067c:	080006a0 	.word	0x080006a0
 8000680:	080006a0 	.word	0x080006a0
 8000684:	080006a4 	.word	0x080006a4

08000688 <_init>:
 8000688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068a:	bf00      	nop
 800068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068e:	bc08      	pop	{r3}
 8000690:	469e      	mov	lr, r3
 8000692:	4770      	bx	lr

08000694 <_fini>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr
